This project brings data from 
  Firestore Collection named in process.argv[2] to MySql table named in process.argv[3]
    The other sql table names are hard-coded because there can be a 1:M relationship between Firestore collection and SQL tables
    
    SYNTAX :
        node index.js <collection name>  <sql table name>                       // console app
        Or
        node startngrokandexpres.js <collection name>  <sql table name>         // experimental express app

        eg. Firestore collection customers populates pbicustomer, pbichildren, pbiss and writes to logfile pbilog
        so the call would be -> node index.js <collection name>  <sql table name>
        node index.js customers pbicustomer
      
#DATE
   Javascript               ->      MySQL
   new Date(# or string)            can be held in DATETIME Type

   # means Date.now()
   string means new Date()

                                    I am using TIMESTAMP type with default of CURRENT_TIMESTAMP for creation date in mysql records




### This project has two entry points.
index.js 
  entry point is a console application that takes data from Firestore and populates MySQL

The startngrokandexpress is experimental. 
    startngrokandexpress entry point is an express web server app that also takes data from Firestore and populates MySQL
    Just gives me a basic ability to download data from Firestore into MySQL.
    There are some routes in the express that are just experimental and not fully functional.
    The only route that seems to work now is when you call /pbi just once -- it downloads data from Firestore into MySQL
    It rights a lot of data to pbilog file... that needs to be addressed

  






### Using the Firebase Admin SDK from nodejs environment - https://firebase.google.com/docs/admin/setup

https://github.com/RahulMisra2000/ACCF_PBI



.env has
ADMINCRED='<The object from Google Console>'
host='<data>'
dbDatabase='<data>'
dbUser='<data>'
dbPassword='<data>'
showConsoleMessage='<data>'
writeAllMessagesToLogTable='<data>'
writeOnlyErrorTypeToLogTable='<data>'

#LOG FILE
CREATE TABLE `pbilog` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `Type` varchar(10) DEFAULT NULL,
  `CreatedAt` varchar(45) DEFAULT NULL,
  `Batch` varchar(64) DEFAULT NULL,
  `Msg` varchar(128) DEFAULT NULL,
  `CollectionName` varchar(32) DEFAULT NULL,
  `TableName` varchar(32) DEFAULT NULL,
  `Other` varchar(128) DEFAULT NULL,
  `CreatedTimeStamp` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=192 DEFAULT CHARSET=latin1;




CREATE TABLE `pbicustomer` (
  `Id` int NOT NULL AUTO_INCREMENT,
  `CreatedAt` bigint DEFAULT NULL,
  `Crisis` varchar(3) NOT NULL DEFAULT '',
  `Name` varchar(64) DEFAULT NULL,
  `Email` varchar(64) DEFAULT NULL,
  `Phone` varchar(20) DEFAULT NULL,
  `Rating` varchar(20) DEFAULT NULL,
  `Status` varchar(20) DEFAULT NULL,
  `RecStatus` varchar(20) DEFAULT NULL,
  `ServiceCompletion` timestamp NULL DEFAULT NULL,
  `Uid` varchar(64) DEFAULT NULL,
  `UidEmail` varchar(64) DEFAULT NULL,
  `FirestoreId` varchar(60) DEFAULT NULL,
  `CreatedAtTimeStamp` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=182 DEFAULT CHARSET=latin1;
